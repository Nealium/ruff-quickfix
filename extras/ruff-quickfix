#!/usr/bin/env python3
"""
File:        ruff-quickfix
Author:      Neal Joslin
Date:        2024-08-17
Email:       neal@joslin.io
Description: Standalone wrapper for `ruff` used for Vim Quickfix
"""

import re
import sys
from subprocess import run

RUFF_REGEX = (
    r"(?P<path>.*):(?P<line>\d+):(?P<col>\d+): "
    r"(?P<code>\S+) (?P<fixable>\[\*\] )*(?P<msg>.*)"
)


def lint(path: str) -> None:
    """
    Run ruff, filter out unusable lines and put into format that
    can be easily parsed by vim's `errorformat`

    Args:
        path (str): file to lint
    """
    cmd = f"ruff check {path} --output-format concise"
    data = run(cmd, capture_output=True, shell=True, check=False)  # noqa: S602
    output = data.stdout.splitlines()

    for line in output:
        result = re.search(RUFF_REGEX, line.decode("utf-8"))
        if result:
            print(  # noqa: T201
                f"{result.group('path')}:"
                f"{result.group('line')}:"
                f"{result.group('col')}:"
                "e:"
                f"{result.group('msg')} [{result.group('code')}]"
            )


def main() -> None:
    """Loop through given files or prompt usage if none are given"""
    if len(sys.argv) == 1:
        print(  # noqa: T201
            "Usage:\n"
            "\truff_wrapper <file1>\n"
            "\truff_wrapper <file1> <file2> <file{x}>\n"
        )
        sys.exit(1)
    for file in sys.argv[1:]:
        lint(file)


if __name__ == "__main__":
    main()
